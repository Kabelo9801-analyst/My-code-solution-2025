Kabelo Ratshefola Code4.Magic portion identifierclass MagicPotion:    def init(base, exponent):        base.exponent = exponent    def is_magical_potion(self):        # Calculate the cube root of the given power level        root = round(base.exponent ** (1/3))        if root ** 3 == base.exponent:            return "YES"        else:            return "NO"def main():    try:        power = int(input("Enter the power level of the potion: "))    except EOFError:        exponent = 27      # Create an object of MagicPotion class    potion = MagicPotion(exponent)        # Output the result    print(potion.is_magical_potion())if __name__ == "__main__":    main()5. Sneaky outcomesdef find_dups(results):    arr = set()    duplicates = []        for results in results:        if results in arr:            duplicates.append(results)        else:            arr.add(results)        return duplicates# Test casesprint(find_dups([1,2,3,4,5,6]))  print(find_dups([2,3,4,5,6,7]))  print(find_dups([1,2,3,3,4,7]))print(find_dups([4,5,6,7,8,9])) print(find_dups([5,6,7,8,9,0]))print(find_dups([6,7,8,9,0,1]))print(find_dups([7,8,9,0,1,2]))print(find_dups([8,9,0,1,2,3]))print(find_dups([9,0,1,2,3,4]))print(find_dups([1,1,2,2,3,3]))print(find_dups([2,2,3,3,4,4]))print(find_dups([3,3,4,4,5,5]))print(find_dups([7,8,9,0,1,2]))print(find_dups([2,2,2,2,3,4]))print(find_dups([1,2,3,3,4,7]))6. Reformatting stringdef inp_str(i):    my_input = []    str_cond = True          for char in i:        if char.isalpha():              if str_cond:                my_input.append(char.upper())               else:                my_input.append(char.lower())              str_cond = not str_cond         else:            my_input.append(char)         return ''.join(my_input)print(inp_str(" Za^B8g@E2jH*kWl!MoPqXr7YvT1c$Fs3Ud9IwZ&yX0pLkV6sHqN^tB4rA+oZ%gFj"))  